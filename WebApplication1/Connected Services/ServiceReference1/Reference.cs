//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Machine", Namespace="http://schemas.datacontract.org/2004/07/WaterLoggic.Core.Models")]
    [System.SerializableAttribute()]
    public partial class Machine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.MCategory CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LongDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] VersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool availableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int stockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.MCategory Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LongDescription {
            get {
                return this.LongDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.LongDescriptionField, value) != true)) {
                    this.LongDescriptionField = value;
                    this.RaisePropertyChanged("LongDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortDescription {
            get {
                return this.ShortDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortDescriptionField, value) != true)) {
                    this.ShortDescriptionField = value;
                    this.RaisePropertyChanged("ShortDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Version {
            get {
                return this.VersionField;
            }
            set {
                if ((object.ReferenceEquals(this.VersionField, value) != true)) {
                    this.VersionField = value;
                    this.RaisePropertyChanged("Version");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool available {
            get {
                return this.availableField;
            }
            set {
                if ((this.availableField.Equals(value) != true)) {
                    this.availableField = value;
                    this.RaisePropertyChanged("available");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int stock {
            get {
                return this.stockField;
            }
            set {
                if ((this.stockField.Equals(value) != true)) {
                    this.stockField = value;
                    this.RaisePropertyChanged("stock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MCategory", Namespace="http://schemas.datacontract.org/2004/07/WaterLoggic.Core.Models")]
    [System.SerializableAttribute()]
    public partial class MCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebApplication1.ServiceReference1.Machine[] MachinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebApplication1.ServiceReference1.Machine[] Machines {
            get {
                return this.MachinesField;
            }
            set {
                if ((object.ReferenceEquals(this.MachinesField, value) != true)) {
                    this.MachinesField = value;
                    this.RaisePropertyChanged("Machines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MachineNameIdDto", Namespace="http://schemas.datacontract.org/2004/07/WaterLoggic.Core.Dto")]
    [System.SerializableAttribute()]
    public partial class MachineNameIdDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMachineRepository")]
    public interface IMachineRepository {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetMachines", ReplyAction="http://tempuri.org/IMachineRepository/GetMachinesResponse")]
        WebApplication1.ServiceReference1.Machine[] GetMachines(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetMachines", ReplyAction="http://tempuri.org/IMachineRepository/GetMachinesResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Machine[]> GetMachinesAsync(string category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetMachineById", ReplyAction="http://tempuri.org/IMachineRepository/GetMachineByIdResponse")]
        WebApplication1.ServiceReference1.Machine GetMachineById(int machineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetMachineById", ReplyAction="http://tempuri.org/IMachineRepository/GetMachineByIdResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Machine> GetMachineByIdAsync(int machineId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetAllMachinesNameId", ReplyAction="http://tempuri.org/IMachineRepository/GetAllMachinesNameIdResponse")]
        WebApplication1.ServiceReference1.MachineNameIdDto[] GetAllMachinesNameId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetAllMachinesNameId", ReplyAction="http://tempuri.org/IMachineRepository/GetAllMachinesNameIdResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.MachineNameIdDto[]> GetAllMachinesNameIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/UpdateMachine", ReplyAction="http://tempuri.org/IMachineRepository/UpdateMachineResponse")]
        void UpdateMachine(WebApplication1.ServiceReference1.Machine machine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/UpdateMachine", ReplyAction="http://tempuri.org/IMachineRepository/UpdateMachineResponse")]
        System.Threading.Tasks.Task UpdateMachineAsync(WebApplication1.ServiceReference1.Machine machine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/AddMachine", ReplyAction="http://tempuri.org/IMachineRepository/AddMachineResponse")]
        void AddMachine(WebApplication1.ServiceReference1.Machine machine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/AddMachine", ReplyAction="http://tempuri.org/IMachineRepository/AddMachineResponse")]
        System.Threading.Tasks.Task AddMachineAsync(WebApplication1.ServiceReference1.Machine machine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/Delete", ReplyAction="http://tempuri.org/IMachineRepository/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/Delete", ReplyAction="http://tempuri.org/IMachineRepository/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetCategories", ReplyAction="http://tempuri.org/IMachineRepository/GetCategoriesResponse")]
        WebApplication1.ServiceReference1.MCategory[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMachineRepository/GetCategories", ReplyAction="http://tempuri.org/IMachineRepository/GetCategoriesResponse")]
        System.Threading.Tasks.Task<WebApplication1.ServiceReference1.MCategory[]> GetCategoriesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMachineRepositoryChannel : WebApplication1.ServiceReference1.IMachineRepository, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MachineRepositoryClient : System.ServiceModel.ClientBase<WebApplication1.ServiceReference1.IMachineRepository>, WebApplication1.ServiceReference1.IMachineRepository {
        
        public MachineRepositoryClient() {
        }
        
        public MachineRepositoryClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MachineRepositoryClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MachineRepositoryClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MachineRepositoryClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebApplication1.ServiceReference1.Machine[] GetMachines(string category) {
            return base.Channel.GetMachines(category);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Machine[]> GetMachinesAsync(string category) {
            return base.Channel.GetMachinesAsync(category);
        }
        
        public WebApplication1.ServiceReference1.Machine GetMachineById(int machineId) {
            return base.Channel.GetMachineById(machineId);
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.Machine> GetMachineByIdAsync(int machineId) {
            return base.Channel.GetMachineByIdAsync(machineId);
        }
        
        public WebApplication1.ServiceReference1.MachineNameIdDto[] GetAllMachinesNameId() {
            return base.Channel.GetAllMachinesNameId();
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.MachineNameIdDto[]> GetAllMachinesNameIdAsync() {
            return base.Channel.GetAllMachinesNameIdAsync();
        }
        
        public void UpdateMachine(WebApplication1.ServiceReference1.Machine machine) {
            base.Channel.UpdateMachine(machine);
        }
        
        public System.Threading.Tasks.Task UpdateMachineAsync(WebApplication1.ServiceReference1.Machine machine) {
            return base.Channel.UpdateMachineAsync(machine);
        }
        
        public void AddMachine(WebApplication1.ServiceReference1.Machine machine) {
            base.Channel.AddMachine(machine);
        }
        
        public System.Threading.Tasks.Task AddMachineAsync(WebApplication1.ServiceReference1.Machine machine) {
            return base.Channel.AddMachineAsync(machine);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public WebApplication1.ServiceReference1.MCategory[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<WebApplication1.ServiceReference1.MCategory[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
    }
}
